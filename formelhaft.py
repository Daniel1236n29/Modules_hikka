__version__ = (1, 0, 0)

# meta developer: @shrimp_mod

from .. import loader, utils
from telethon.tl.types import Message
import asyncio

@loader.tds
class TemplateResponderMod(loader.Module):
    """–ú–æ–¥—É–ª—å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ —à–∞–±–ª–æ–Ω–∞–º"""
    
    strings = {
        "name": "TemplateResponder",
        "template_saved": "‚úÖ –®–∞–±–ª–æ–Ω {} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {}",
        "template_deleted": "‚úÖ –®–∞–±–ª–æ–Ω {} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω",
        "template_not_found": "‚ùå –®–∞–±–ª–æ–Ω {} –Ω–µ –Ω–∞–π–¥–µ–Ω",
        "no_templates": "‚ùå –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤",
        "current_templates": "üìù –¢–µ–∫—É—â–∏–µ —à–∞–±–ª–æ–Ω—ã:\n\n{}",
        "auto_enabled": "‚úÖ –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫ –≤–∫–ª—é—á–µ–Ω –≤ —ç—Ç–æ–º —á–∞—Ç–µ —Å —à–∞–±–ª–æ–Ω–æ–º {}",
        "auto_disabled": "‚ùå –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫ –≤—ã–∫–ª—é—á–µ–Ω –≤ —ç—Ç–æ–º —á–∞—Ç–µ",
        "active_chats": "üìä –ê–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã —Å –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫–æ–º:\n\n{}",
        "invalid_template": "‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —à–∞–±–ª–æ–Ω–∞ –∏ —Ç–µ–∫—Å—Ç\n–ü—Ä–∏–º–µ—Ä: .settemplate 1 –û—Ç–≤–µ—Ç: {retext}",
        "template_list_item": "–®–∞–±–ª–æ–Ω {}: {}"
    }

    async def client_ready(self, client, db):
        self._db = db
        self._client = client
        self.auto_chats = self._db.get(self.strings["name"], "auto_chats", {})
        self.templates = self._db.get(self.strings["name"], "templates", {})

    def get_template(self, number):
        return self.templates.get(str(number))

    def save_templates(self):
        self._db.set(self.strings["name"], "templates", self.templates)

    def save_auto_chats(self):
        self._db.set(self.strings["name"], "auto_chats", self.auto_chats)

    async def send_and_delete(self, message, text, delay=3):
        reply = await utils.answer(message, text)
        await asyncio.sleep(delay)
        await reply.delete()

    async def settemplatecmd(self, message):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —à–∞–±–ª–æ–Ω. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: .settemplate <–Ω–æ–º–µ—Ä> <—Ç–µ–∫—Å—Ç —à–∞–±–ª–æ–Ω–∞>"""
        args = utils.get_args_raw(message).split(maxsplit=1)
        
        if len(args) != 2 or not args[0].isdigit():
            await utils.answer(message, self.strings["invalid_template"])
            return

        template_num = args[0]
        template_text = args[1]
        
        self.templates[template_num] = template_text
        self.save_templates()
        
        await utils.answer(
            message,
            self.strings["template_saved"].format(template_num, template_text)
        )

    async def deltemplatecmd(self, message):
        """–£–¥–∞–ª–∏—Ç—å —à–∞–±–ª–æ–Ω. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: .deltemplate <–Ω–æ–º–µ—Ä>"""
        args = utils.get_args_raw(message)
        
        if not args or not args.isdigit():
            await utils.answer(message, "‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —à–∞–±–ª–æ–Ω–∞")
            return

        if args in self.templates:
            del self.templates[args]
            self.save_templates()
            await utils.answer(message, self.strings["template_deleted"].format(args))
        else:
            await utils.answer(message, self.strings["template_not_found"].format(args))

    async def templatescmd(self, message):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —à–∞–±–ª–æ–Ω—ã"""
        if not self.templates:
            await utils.answer(message, self.strings["no_templates"])
            return

        templates_text = ""
        for num, text in sorted(self.templates.items(), key=lambda x: int(x[0])):
            templates_text += self.strings["template_list_item"].format(num, text) + "\n"

        await utils.answer(
            message,
            self.strings["current_templates"].format(templates_text)
        )

    async def autooncmd(self, message):
        """–í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫ –≤ —á–∞—Ç–µ. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: .autoon <–Ω–æ–º–µ—Ä —à–∞–±–ª–æ–Ω–∞>"""
        args = utils.get_args_raw(message)
        
        if not args or not args.isdigit():
            await utils.answer(message, "‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —à–∞–±–ª–æ–Ω–∞")
            return

        if args not in self.templates:
            await utils.answer(message, self.strings["template_not_found"].format(args))
            return

        chat = str(message.chat_id)
        self.auto_chats[chat] = args
        self.save_auto_chats()
        
        await self.send_and_delete(
            message, 
            self.strings["auto_enabled"].format(args)
        )

    async def autooffcmd(self, message):
        """–í—ã–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫ –≤ —á–∞—Ç–µ"""
        chat = str(message.chat_id)
        
        if chat in self.auto_chats:
            del self.auto_chats[chat]
            self.save_auto_chats()
        
        await self.send_and_delete(message, self.strings["auto_disabled"])

    async def autochatscmd(self, message):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ —Å –∞–∫—Ç–∏–≤–Ω—ã–º –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫–æ–º"""
        if not self.auto_chats:
            await utils.answer(message, "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤ —Å –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫–æ–º")
            return

        chats_info = []
        for chat_id, template in self.auto_chats.items():
            try:
                chat = await self._client.get_entity(int(chat_id))
                chat_name = chat.title if hasattr(chat, 'title') else chat.first_name
                template_text = self.templates.get(template, "–®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
                chats_info.append(f"‚Ä¢ {chat_name}:\n–®–∞–±–ª–æ–Ω {template}: {template_text}")
            except Exception:
                template_text = self.templates.get(template, "–®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
                chats_info.append(f"‚Ä¢ –ß–∞—Ç {chat_id}:\n–®–∞–±–ª–æ–Ω {template}: {template_text}")

        await utils.answer(
            message,
            self.strings["active_chats"].format("\n".join(chats_info))
        )

    async def watcher(self, message):
        if message.out:
            return
        
        chat = str(message.chat_id)
        if chat not in self.auto_chats:
            return

        template_num = self.auto_chats[chat]
        template = self.get_template(template_num)
        
        if template and message.text:
            response = template.replace("{retext}", message.text)
            await message.reply(response)