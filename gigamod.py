
# meta developer: @shrimp_mod

from .. import loader, utils
from telethon import events
from gigachat import GigaChat
from gigachat.models import Chat, Messages, MessagesRole

class GigaChatMod(loader.Module):
    """–ú–æ–¥—É–ª—å –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è GigaChat. —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å api –ø–µ—Ä–µ–π–¥–∏—Ç–µ —Å—é–¥–∞: https://developers.sber.ru/studio/workspaces """

    strings = {"name": "GigaChat"}
    
    def __init__(self):
        self.config = loader.ModuleConfig(
            "GIGACHAT_API_KEY", None, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à API –∫–ª—é—á –¥–ª—è GigaChat"
        )
    
    async def client_ready(self, client, db):
        self.client = client
    
    @loader.command()
    async def gigacmd(self, message):
        """–ü–æ–ª—É—á–∏—Ç—å giga–û—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å"""
        if not self.config["GIGACHAT_API_KEY"]:
            await utils.answer(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ API –∫–ª—é—á –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –º–æ–¥—É–ª—è.")
            return

        args = utils.get_args_raw(message)
        if not args:
            await utils.answer(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.")
            return

        async with GigaChat(credentials=self.config["GIGACHAT_API_KEY"], scope="GIGACHAT_API_PERS", verify_ssl_certs=False) as giga:
            response = giga.chat(args)

        result = response.choices[0].message.content
        
        await utils.answer(
            message,
            f"‚ùî –ó–∞–ø—Ä–æ—Å: {args}\nü•∏ Giga–û—Ç–≤–µ—Ç: {result}"
        )
   
