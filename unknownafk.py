# meta developer: @shrimp_mod
__version__ = (3, 5, 4)

import asyncio
import datetime
import time
import re
import pytz

from telethon import types
from telethon.tl.functions.account import UpdateProfileRequest, UpdateEmojiStatusRequest
from telethon.tl.functions.users import GetFullUserRequest
from telethon.tl.types import EmojiStatus, EmojiStatusEmpty

from .. import loader, utils
from ..inline.types import InlineCall

class UnknownAFKMod(loader.Module):
    """–ú–æ–¥—É–ª—å –ê–§–ö –∫–æ—Ç–æ—Ä—ã–π –º–µ–Ω—è–µ—Ç —ç–º–æ–¥–∑–∏ —Å—Ç–∞—Ç—É—Å (–æ–Ω–ª–∏ –ü—Ä–µ–º) –∏ –≤—Å—è–∫–∞—è –¥—Ä—É–≥–∞—è –≤—Å—è—á–∏–Ω–∞"""

    PERMANENT_BLACKLIST = [777000]

    strings = {
        "name": "UnknownAFK",
        "bt_off_afk": "<emoji document_id=5872829476143894491>üö´</emoji> <b>–ê–§–ö</b> —Ä–µ–∂–∏–º <b>–æ—Ç–∫–ª—é—á–µ–Ω</b>!",
        "invalid_time_format": "<emoji document_id=5778527486270770928>‚ùå</emoji> <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏!</b>\n<emoji document_id=5335054400513649848>üìù</emoji> –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç <code>16:30</code>",
        "chat_blacklisted": "<emoji document_id=5309788666984415888>üòä</emoji> <b>–¢–µ–∫—É—â–∏–π —á–∞—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫</b>",
        "chat_already_blacklisted": "<emoji document_id=5778527486270770928>‚ùå</emoji> <b>–≠—Ç–æ—Ç —á–∞—Ç —É–∂–µ –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ</b>",
        "chat_removed": "<emoji document_id=5309788666984415888>üòä</emoji> <b>–¢–µ–∫—É—â–∏–π —á–∞—Ç —É–¥–∞–ª–µ–Ω –∏–∑ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞</b>",
        "no_chat_in_blacklist": "<emoji document_id=5778527486270770928>‚ùå</emoji> <b>–≠—Ç–æ—Ç —á–∞—Ç –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ</b>",
        "blacklist_title": "<emoji document_id=5872829476143894491>üö´</emoji> <b>–ß–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤:</b>\n",
        "blacklist_empty": "<emoji document_id=5416118154424242282>üê±</emoji> <b>–ß–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –ø—É—Å—Ç</b>",
        "contact_feedback": "üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –±–æ—Ç–æ–º",
        "turn_off_afk": "üö´ –í—ã–∫–ª—é—á–∏—Ç—å –ê–§–ö"
    }

    def __init__(self):
        self.config = loader.ModuleConfig(
            loader.ConfigValue(
                "blacklist_chats",
                [],
                doc=lambda: "–°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –ê–§–ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (ID —á–∞—Ç–æ–≤ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)",
                validator=loader.validators.Series(loader.validators.Integer())
            ),
            loader.ConfigValue(
                "timezone",
                "Europe/Moscow",
                doc=lambda: "–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä, Europe/Moscow, Europe/London, US/Eastern)"
            ),
            loader.ConfigValue(
                "prefix",
                "",
                doc=lambda: "–ü—Ä–µ—Ñ–∏–∫—Å –¥–ª—è –∏–º–µ–Ω–∏ –≤–æ –≤—Ä–µ–º—è –ê–§–ö"
            ),
            loader.ConfigValue(
                "feedback",
                None,
                doc=lambda: "–Æ–∑–µ—Ä–Ω–µ–π–º –≤–∞—à–µ–≥–æ feedback –±–æ—Ç–∞. –ï—Å–ª–∏ –Ω–µ—Ç—É - –Ω–µ —Ç—Ä–æ–≥–∞–π—Ç–µ",
            ),
            loader.ConfigValue(
                "about_text",
                None,
                doc=lambda: "–¢–µ–∫—Å—Ç –≤ –±–∏–æ –ø—Ä–∏ –ê–§–ö. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ {bot} –¥–ª—è –±–æ—Ç–∞ –∏ {reason} –¥–ª—è –ø—Ä–∏—á–∏–Ω—ã."
            ),
            loader.ConfigValue(
                "afk_text",
                "None",
                doc=lambda: "–ö–∞—Å—Ç–æ–º–Ω—ã–π —Ç–µ–∫—Å—Ç –∞—Ñ–∫. –ò—Å–ø–æ–ª—å–∑—É–π {time} –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏, {reason} –¥–ª—è –ø—Ä–∏—á–∏–Ω—ã, {return_time} –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è –∏ {zone} –¥–ª—è —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞",
            ),
            loader.ConfigValue(
                "use_emoji_status",
                True,
                doc=lambda: "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç–º–æ–¥–∑–∏ —Å—Ç–∞—Ç—É—Å (—Ç—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–µ–º–∏—É–º)",
                validator=loader.validators.Boolean(),
            ),
            loader.ConfigValue(
                "afk_emoji_status_id",
                5433792778070925926, 
                doc=lambda: "ID —ç–º–æ–¥–∑–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ –ê–§–ö (—Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å –ø—Ä–µ–º–∏—É–º)",
            ),
            loader.ConfigValue(
                "default_emoji_status_id",
                None,
                doc=lambda: "ID –≤–∞—à–µ–≥–æ –æ–±—ã—á–Ω–æ–≥–æ —ç–º–æ–¥–∑–∏ —Å—Ç–∞—Ç—É—Å–∞ (—á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å –ø–æ—Å–ª–µ –ê–§–ö)",
            ),
            loader.ConfigValue(
                "button",
                False,
                doc=lambda: "–î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –ê–§–ö —Ä–µ–∂–∏–º–∞?",
                validator=loader.validators.Boolean(),
            ),
            loader.ConfigValue(
                "original_last_name",
                "",
                doc=lambda: "–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è —Ñ–∞–º–∏–ª–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è"
            )
        )

    async def client_ready(self, client, db):
        user_blacklist = self.config["blacklist_chats"]
        combined_blacklist = list(set(self.PERMANENT_BLACKLIST + user_blacklist))
        self.config["blacklist_chats"] = combined_blacklist
        self._me = await client.get_me()
        self._premium = self._me.premium
        if not self._db.get(__name__, "notified_users"):
            self._db.set(__name__, "notified_users", [])
        self._check_return_time_task = asyncio.create_task(self._check_return_time_loop())
        
        me = await client(GetFullUserRequest(self._me.id))
        self.config["original_last_name"] = me.users[0].last_name or ""

    async def _disable_afk_mode(self):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –ê–§–ö —Ä–µ–∂–∏–º–∞ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ"""
        self._db.set(__name__, "afk", False)
        self._db.set(__name__, "gone", None)
        self._db.set(__name__, "notified_users", [])
        self._db.set(__name__, "return_time", None)
        
        original_last_name = self.config["original_last_name"]
        await self._client(UpdateProfileRequest(last_name=original_last_name or " "))
        
        if self._db.get(__name__, "change_bio", False):
            try:
                await self._client(UpdateProfileRequest(about=self._db.get(__name__, "about", "")))
            except Exception:
                pass

        await self._update_emoji_status(False)

    async def _check_return_time_loop(self):
        """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –ê–§–ö"""
        while True:
            await asyncio.sleep(60)
            afk_state = self._db.get(__name__, "afk", False)
            return_time = self._db.get(__name__, "return_time")
            
            if afk_state and return_time and return_time != "–Ω–µ —É–∫–∞–∑–∞–Ω–æ":
                tz = pytz.timezone(self.config["timezone"])
                current_time = datetime.datetime.now(tz).strftime("%H:%M")
                
                if current_time == return_time:
                    await self._disable_afk_mode()


    @loader.command()
    async def afklist(self, message):
        """–ü–æ–∫–∞–∑–∞—Ç—å —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤"""
        blacklist_chats = self.config["blacklist_chats"]
        
        if not blacklist_chats:
            await utils.answer(message, self.strings["blacklist_empty"])
            return
        
        blacklist_msg = self.strings["blacklist_title"]
        for chat_id in blacklist_chats:
            try:
                is_permanent = chat_id in self.PERMANENT_BLACKLIST
                permanent_mark = " üîí" if is_permanent else ""
                
                chat = await message.client.get_entity(chat_id)
                chat_name = getattr(chat, 'title', str(chat_id))
                blacklist_msg += f"‚Ä¢ <code>{chat_id}</code> - {chat_name}{permanent_mark}\n"
            except Exception:
                blacklist_msg += f"‚Ä¢ <code>{chat_id}</code>{' üîí' if chat_id in self.PERMANENT_BLACKLIST else ''}\n"
        
        await utils.answer(message, blacklist_msg)

    @loader.command()
    async def afkadd(self, message):
        """–î–æ–±–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–∏–π —á–∞—Ç –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫"""
        blacklist_chats = self.config["blacklist_chats"]
        
        try:
            if message.chat_id in self.PERMANENT_BLACKLIST:
                await utils.answer(message, "<emoji document_id=5778527486270770928>‚ùå</emoji> <b>–≠—Ç–æ—Ç —á–∞—Ç/–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è —á–∞—Å—Ç—å—é –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞!</b>")
                return

            if message.is_private:
                user_id = message.chat_id
                if user_id not in blacklist_chats:
                    blacklist_chats.append(user_id)
                    self.config["blacklist_chats"] = blacklist_chats
                    await utils.answer(message, "<emoji document_id=5309788666984415888>üòä</emoji> <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫</b>")
                else:
                    await utils.answer(message, "<emoji document_id=5778527486270770928>‚ùå</emoji> <b>–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ</b>")
            else:
                current_chat_id = message.chat_id
                
                if current_chat_id not in blacklist_chats:
                    blacklist_chats.append(current_chat_id)
                    self.config["blacklist_chats"] = blacklist_chats
                    await utils.answer(message, self.strings["chat_blacklisted"])
                else:
                    await utils.answer(message, self.strings["chat_already_blacklisted"])
        except Exception as e:
            await utils.answer(message, f"–û—à–∏–±–∫–∞: {str(e)}")

    @loader.command()
    async def afkdel(self, message):
        """–£–¥–∞–ª–∏—Ç—å —Ç–µ–∫—É—â–∏–π —á–∞—Ç –∏–∑ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞"""
        blacklist_chats = self.config["blacklist_chats"]
        current_chat_id = message.chat_id
        
        if current_chat_id in self.PERMANENT_BLACKLIST:
            await utils.answer(message, "<emoji document_id=5778527486270770928>‚ùå</emoji> <b>–≠—Ç–æ—Ç —á–∞—Ç/–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è —á–∞—Å—Ç—å—é –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —É–¥–∞–ª–µ–Ω!</b>")
            return
        
        if current_chat_id in blacklist_chats:
            blacklist_chats.remove(current_chat_id)
            self.config["blacklist_chats"] = blacklist_chats
            await utils.answer(message, self.strings["chat_removed"])
        else:
            await utils.answer(message, self.strings["no_chat_in_blacklist"])

    def _validate_time(self, time_str):
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤—Ä–µ–º–µ–Ω–∏
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ –≤—Ä–µ–º—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, –∏–Ω–∞—á–µ False
        """
        try:
            time_pattern = r'^\d{1,2}:\d{2}$'
            if not re.match(time_pattern, time_str):
                return False
            
            hours, minutes = map(int, time_str.split(':'))
            
            if hours < 0 or hours > 23:
                return False
            if minutes < 0 or minutes > 59:
                return False
            
            return True
        except:
            return False

    def _parse_return_time(self, text):
        """–ü–∞—Ä—Å–∏—Ç –≤—Ä–µ–º—è –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        time_pattern = r'\d{1,2}:\d{2}'
        match = re.search(time_pattern, text)
        if match and self._validate_time(match.group(0)):
            return match.group(0)
        return None

    def _afk_custom_text(self) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –ê–§–ö"""
        now = datetime.datetime.now().replace(microsecond=0)
        gone = datetime.datetime.fromtimestamp(
            self._db.get(__name__, "gone")
        ).replace(microsecond=0)

        time = now - gone
        reason = self._db.get(__name__, "reason")
        return_time = self._db.get(__name__, "return_time", "–Ω–µ —É–∫–∞–∑–∞–Ω–æ")
        zone = self.config["timezone"]
        
        return (
            ""
            + self.config["afk_text"].format(
                time=time,
                reason=reason,
                return_time=return_time,
                zone=zone
            )
        )

    async def _update_emoji_status(self, enable: bool = True):
        if not self._premium or not self.config["use_emoji_status"]:
            return
            
        try:
            if enable:
                await self._client(UpdateEmojiStatusRequest(
                    emoji_status=EmojiStatus(
                        document_id=self.config["afk_emoji_status_id"]
                    )
                ))
            else:
                if self.config["default_emoji_status_id"]:
                    await self._client(UpdateEmojiStatusRequest(
                        emoji_status=EmojiStatus(
                            document_id=self.config["default_emoji_status_id"]
                        )
                    ))
                else:
                    await self._client(UpdateEmojiStatusRequest(
                        emoji_status=EmojiStatusEmpty()
                    ))
        except Exception:
            pass

    @loader.command()
    async def afk(self, message):
        """[–ø—Ä–∏—á–∏–Ω–∞] [–≤—Ä–µ–º—è] - –≤–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –ê–§–ö —Ä–µ–∂–∏–º"""
        current_state = self._db.get(__name__, "afk", False)
    
        if current_state:
            await self._disable_afk_mode()
            m = await utils.answer(message, self.strings["bt_off_afk"])
            await asyncio.sleep(5)
            await m.delete()
        else:
            args = utils.get_args_raw(message)
            reason = args
            return_time = self._parse_return_time(args)
            
            if '–≤—Ä–µ–º—è' in args.lower() and not return_time:
                return await utils.answer(message, self.strings["invalid_time_format"])
            
            if return_time:
                reason = args.replace(return_time, '').strip()
            
            reason = reason or "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
            
            self._db.set(__name__, "reason", reason)
            self._db.set(__name__, "afk", True)
            self._db.set(__name__, "gone", time.time())
            self._db.set(__name__, "notified_users", [])
            self._db.set(__name__, "return_time", return_time or "–Ω–µ —É–∫–∞–∑–∞–Ω–æ")
            
            await self._client(UpdateProfileRequest(last_name=f"{self.config['prefix']}" if self.config['prefix'] else ""))

            if self._db.get(__name__, "change_bio", True):
                try:
                    await self._client(UpdateProfileRequest(about=self._db.get(__name__, "about", "")))
                except Exception:
                    pass

            await self._update_emoji_status(True)
            
            buttons = []
            if self.config["button"]:
                if self.config["feedback"]:
                    buttons.append(
                        {"text": self.strings["contact_feedback"], "callback": self._contact_feedback}
                    )
                
                buttons.append(
                    {"text": self.strings["turn_off_afk"], "callback": self._turn_off_afk}
                )
            
            if buttons:
                m = await self.inline.form(
                    f"<b>–ê–§–ö —Ä–µ–∂–∏–º –≤–∫–ª—é—á–µ–Ω</b>\n"
                    f"<emoji document_id=5445161912985724546>‚úèÔ∏è</emoji> <b>–ü—Ä–∏—á–∏–Ω–∞:</b> <b>{reason}</b>\n"
                    f"<emoji document_id=5287758504117940879>‚åöÔ∏è</emoji> <b>–í—Ä–µ–º—è –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è:</b> {return_time or '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}",
                    message=message,
                    reply_markup=buttons
                )
            else:
                m = await utils.answer(
                    message,
                    f"<b>–ê–§–ö —Ä–µ–∂–∏–º –≤–∫–ª—é—á–µ–Ω</b>\n"
                    f"<emoji document_id=5445161912985724546>‚úèÔ∏è</emoji> <b>–ü—Ä–∏—á–∏–Ω–∞:</b> <b>{reason}</b>\n"
                    f"<emoji document_id=5287758504117940879>‚åöÔ∏è</emoji> <b>–í—Ä–µ–º—è –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è:</b> {return_time or '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}"
                )

            await asyncio.sleep(5)
            await m.delete()

    async def _contact_feedback(self, call: InlineCall):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ feedback –±–æ—Ç–∞"""
        if not self.config["feedback"]:
            await call.answer("Feedback –±–æ—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω", show_alert=True)
            return

        try:
            await self._client.send_message(
                self.config["feedback"], 
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {self._me.first_name} —Å–µ–π—á–∞—Å –≤ –ê–§–ö\n"
                f"–ü—Ä–∏—á–∏–Ω–∞: {self._db.get(__name__, 'reason', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}"
            )
            await call.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ", show_alert=True)
        except Exception as e:
            await call.answer(f"–û—à–∏–±–∫–∞: {str(e)}", show_alert=True)

    async def _turn_off_afk(self, call: InlineCall):
        """–í—ã–∫–ª—é—á–µ–Ω–∏–µ –ê–§–ö —Ä–µ–∂–∏–º–∞ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É"""
        await self._disable_afk_mode()
        await call.answer("–ê–§–ö —Ä–µ–∂–∏–º –≤—ã–∫–ª—é—á–µ–Ω", show_alert=True)
    
    @loader.watcher()
    async def watcher(self, message):
        """–û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ê–§–ö-—Ä–µ–∂–∏–º–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        if not isinstance(message, types.Message):
            return

        try:
            sender = await message.get_sender()
            if sender and sender.bot:
                return
        except Exception:
            pass

        blacklist_chats = self.config["blacklist_chats"]
        
        if message.chat_id in blacklist_chats:
            return

        is_mentioned = message.mentioned
        is_private_message = getattr(message.to_id, "user_id", None) == self._me.id

        if not (is_mentioned or is_private_message):
            return

        afk_state = self._db.get(__name__, "afk", False)
        if not afk_state:
            return

        sender_id = message.from_id
        notified_users = self._db.get(__name__, "notified_users", [])
        
        if sender_id in notified_users:
            return
        
        notified_users.append(sender_id)
        self._db.set(__name__, "notified_users", notified_users)

        now = datetime.datetime.now().replace(microsecond=0)
        gone = datetime.datetime.fromtimestamp(
            self._db.get(__name__, "gone")
        ).replace(microsecond=0)
        time_diff = now - gone
        reason = self._db.get(__name__, "reason", "–ù–µ —É–∫–∞–∑–∞–Ω–∞")
        return_time = self._db.get(__name__, "return_time", "–Ω–µ —É–∫–∞–∑–∞–Ω–æ")
        zone = self.config["timezone"]

        if not self.config["afk_text"]:
            afk_message = (
                "<emoji document_id=5287613458777387650>üò¥</emoji> <b>–°–µ–π—á–∞—Å —è –≤ –ê–§–ö —Ä–µ–∂–∏–º–µ</b>\n"
                f"<emoji document_id=5287737368583876982>üåÄ</emoji> –ë—ã–ª <b>–æ–Ω–ª–∞–π–Ω</b>: <code>{time_diff}</code> –Ω–∞–∑–∞–¥\n"
                f"<emoji document_id=5445161912985724546>‚úèÔ∏è</emoji> –ü—Ä–∏—á–∏–Ω–∞: <b>{reason}</b>\n"
                f"<emoji document_id=5287758504117940879>‚åöÔ∏è</emoji> –í—Ä–µ–º—è –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è: {return_time}\n"
                f"<emoji document_id=5287758504117940879>üåç</emoji> –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {zone}"
            )
        else:
            afk_message = self._afk_custom_text()

        await utils.answer(message, afk_message)
