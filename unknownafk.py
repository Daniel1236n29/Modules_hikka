__version__ = (2, 4, 2)

import asyncio
import datetime
import time
import re

from telethon import types
from telethon.tl.functions.account import UpdateProfileRequest, UpdateEmojiStatusRequest
from telethon.tl.functions.users import GetFullUserRequest
from telethon.tl.types import EmojiStatus, EmojiStatusEmpty

from .. import loader, utils
from ..inline.types import InlineCall

class UnknownAFKMod(loader.Module):
    """"""

    async def client_ready(self, client, db):
        self._me = await client.get_me()
        self._premium = self._me.premium
        if not self._db.get(__name__, "notified_users"):
            self._db.set(__name__, "notified_users", [])

    strings = {
        "name": "UnknownAFK",
        "bt_off_afk": "üö´ <b>–ê–§–ö</b> —Ä–µ–∂–∏–º <b>–æ—Ç–∫–ª—é—á–µ–Ω</b>!",
        "invalid_time_format": "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏!</b>\nüìù –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç <code>16:30</code>",
    }

    def __init__(self):
        self.config = loader.ModuleConfig(
            loader.ConfigValue(
                "prefix",
                "",
                doc=lambda: "–ü—Ä–µ—Ñ–∏–∫—Å –¥–ª—è –∏–º–µ–Ω–∏ –≤–æ –≤—Ä–µ–º—è –ê–§–ö"
            ),
            loader.ConfigValue(
                "feedback",
                None,
                doc=lambda: "–Æ–∑–µ—Ä–Ω–µ–π–º –≤–∞—à–µ–≥–æ feedback –±–æ—Ç–∞. –ï—Å–ª–∏ –Ω–µ—Ç—É - –Ω–µ —Ç—Ä–æ–≥–∞–π—Ç–µ",
            ),
            loader.ConfigValue(
                "about_text",
                None,
                doc=lambda: "–¢–µ–∫—Å—Ç –≤ –±–∏–æ –ø—Ä–∏ –ê–§–ö. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ {bot} –¥–ª—è –±–æ—Ç–∞ –∏ {reason} –¥–ª—è –ø—Ä–∏—á–∏–Ω—ã."
            ),
            loader.ConfigValue(
                "afk_text",
                "None",
                doc=lambda: "–ö–∞—Å—Ç–æ–º–Ω—ã–π —Ç–µ–∫—Å—Ç –∞—Ñ–∫. –ò—Å–ø–æ–ª—å–∑—É–π {time} –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏, {reason} –¥–ª—è –ø—Ä–∏—á–∏–Ω—ã –∏ {return_time} –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è",
            ),
            loader.ConfigValue(
                "use_emoji_status",
                True,
                doc=lambda: "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç–º–æ–¥–∑–∏ —Å—Ç–∞—Ç—É—Å (—Ç—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–µ–º–∏—É–º)",
                validator=loader.validators.Boolean(),
            ),
            loader.ConfigValue(
                "afk_emoji_status_id",
                5433792778070925926, 
                doc=lambda: "ID —ç–º–æ–¥–∑–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ –ê–§–ö (—Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å –ø—Ä–µ–º–∏—É–º)",
            ),
            loader.ConfigValue(
                "default_emoji_status_id",
                None,
                doc=lambda: "ID –≤–∞—à–µ–≥–æ –æ–±—ã—á–Ω–æ–≥–æ —ç–º–æ–¥–∑–∏ —Å—Ç–∞—Ç—É—Å–∞ (—á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å –ø–æ—Å–ª–µ –ê–§–ö)",
            ),
            loader.ConfigValue(
                "button",
                True,
                doc=lambda: "–î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –ê–§–ö —Ä–µ–∂–∏–º–∞?",
                validator=loader.validators.Boolean(),
            )
        )

    def _validate_time(self, time_str):
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤—Ä–µ–º–µ–Ω–∏
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ –≤—Ä–µ–º—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, –∏–Ω–∞—á–µ False
        """
        try:
            time_pattern = r'^\d{1,2}:\d{2}$'
            if not re.match(time_pattern, time_str):
                return False
            
            hours, minutes = map(int, time_str.split(':'))
            
            if hours < 0 or hours > 23:
                return False
            if minutes < 0 or minutes > 59:
                return False
            
            return True
        except:
            return False

    def _parse_return_time(self, text):
        """–ü–∞—Ä—Å–∏—Ç –≤—Ä–µ–º—è –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        time_pattern = r'\d{1,2}:\d{2}'
        match = re.search(time_pattern, text)
        if match and self._validate_time(match.group(0)):
            return match.group(0)
        return None

    def _afk_custom_text(self) -> str:
        now = datetime.datetime.now().replace(microsecond=0)
        gone = datetime.datetime.fromtimestamp(
            self._db.get(__name__, "gone")
        ).replace(microsecond=0)

        time = now - gone
        reason = self._db.get(__name__, "reason")
        return_time = self._db.get(__name__, "return_time", "–Ω–µ —É–∫–∞–∑–∞–Ω–æ")
        
        return (
            ""
            + self.config["afk_text"].format(
                time=time,
                reason=reason,
                return_time=return_time
            )
        )

    async def _update_emoji_status(self, enable: bool = True):
        if not self._premium or not self.config["use_emoji_status"]:
            return
            
        try:
            if enable:
                await self._client(UpdateEmojiStatusRequest(
                    emoji_status=EmojiStatus(
                        document_id=self.config["afk_emoji_status_id"]
                    )
                ))
            else:
                if self.config["default_emoji_status_id"]:
                    await self._client(UpdateEmojiStatusRequest(
                        emoji_status=EmojiStatus(
                            document_id=self.config["default_emoji_status_id"]
                        )
                    ))
                else:
                    await self._client(UpdateEmojiStatusRequest(
                        emoji_status=EmojiStatusEmpty()
                    ))
        except Exception:
            pass

    @loader.command()
    async def afk(self, message):
        """[–ø—Ä–∏—á–∏–Ω–∞] [–≤—Ä–µ–º—è] - –≤–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –ê–§–ö —Ä–µ–∂–∏–º"""
        current_state = self._db.get(__name__, "afk", False)
        
        if current_state:
            self._db.set(__name__, "afk", False)
            self._db.set(__name__, "gone", None)
            self._db.set(__name__, "notified_users", [])
            self._db.set(__name__, "return_time", None)
            
            if self._db.get(__name__, "change_name", False):
                await message.client(UpdateProfileRequest(last_name=" "))
                
            if self._db.get(__name__, "change_bio", False):
                try:
                    await message.client(UpdateProfileRequest(about=self._db.get(__name__, "about", "")))
                except Exception:
                    pass

            await self._update_emoji_status(False)
            m = await utils.answer(message, "<emoji document_id=5287611315588707430>‚ùå</emoji> <b>–ê–§–ö —Ä–µ–∂–∏–º –≤—ã–∫–ª—é—á–µ–Ω</b>")
        else:
            args = utils.get_args_raw(message)
            reason = args
            return_time = self._parse_return_time(args)
            
            if '–≤—Ä–µ–º—è' in args.lower() and not return_time:
                return await utils.answer(message, self.strings["invalid_time_format"])
            
            if return_time:
                reason = args.replace(return_time, '').strip()
            
            reason = reason or "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
            
            self._db.set(__name__, "reason", reason)
            self._db.set(__name__, "afk", True)
            self._db.set(__name__, "gone", time.time())
            self._db.set(__name__, "notified_users", [])
            self._db.set(__name__, "return_time", return_time or "–Ω–µ —É–∫–∞–∑–∞–Ω–æ")
            
            try:
                if self._db.get(__name__, "change_name", True):
                    await self._client(UpdateProfileRequest(last_name=""))
            except Exception:
                pass

            if self._db.get(__name__, "change_bio", True):
                try:
                    await self._client(UpdateProfileRequest(about=self._db.get(__name__, "about", "")))
                except Exception:
                    pass

            await self._update_emoji_status(True)
            m = await utils.answer(
                message,
                f"<b>–ê–§–ö —Ä–µ–∂–∏–º –≤–∫–ª—é—á–µ–Ω</b>\n"
                f"<emoji document_id=5445161912985724546>‚úèÔ∏è</emoji> <b>–ü—Ä–∏—á–∏–Ω–∞:</b> <b>{reason}</b>\n"
                f"<emoji document_id=5287758504117940879>‚åöÔ∏è</emoji> <b>–ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è:</b> {return_time or '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}"
            )

        await asyncio.sleep(5)
        await m.delete()


    @loader.watcher()
    async def watcher(self, message):
        if not isinstance(message, types.Message):
            return

        if message.mentioned or getattr(message.to_id, "user_id", None) == self._me.id:
            afk_state = self._db.get(__name__, "afk", False)
            if not afk_state:
                return

            sender_id = message.from_id
            
            notified_users = self._db.get(__name__, "notified_users", [])
            
            if sender_id in notified_users:
                return
                
            notified_users.append(sender_id)
            self._db.set(__name__, "notified_users", notified_users)

            if not self.config["afk_text"]:
                now = datetime.datetime.now().replace(microsecond=0)
                gone = datetime.datetime.fromtimestamp(
                    self._db.get(__name__, "gone")
                ).replace(microsecond=0)
                time = now - gone
                reason = self._db.get(__name__, "reason")
                return_time = self._db.get(__name__, "return_time", "–Ω–µ —É–∫–∞–∑–∞–Ω–æ")

                await utils.answer(
                    message,
                    "<emoji document_id=5287613458777387650>üò¥</emoji> <b>–°–µ–π—á–∞—Å —è –≤ –ê–§–ö —Ä–µ–∂–∏–º–µ</b>\n"
                    f"</b><emoji document_id=5287737368583876982>üåÄ</emoji> –ë—ã–ª <b>–æ–Ω–ª–∞–π–Ω</b>: <code>{time}</code> –Ω–∞–∑–∞–¥\n"
                    f"<emoji document_id=5445161912985724546>‚úèÔ∏è</emoji> –ü—Ä–∏—á–∏–Ω–∞: <b>{reason}</b>\n"
                    f"<emoji document_id=5287758504117940879>‚åöÔ∏è</emoji> –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è: {return_time}"
                )
            else:
                await utils.answer(message, self._afk_custom_text())