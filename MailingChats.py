__version__ = (1, 2, 1)

# meta developer: @shrimp_mod

from .. import loader, utils
import logging
import asyncio

@loader.tds
class MailingChatsMod(loader.Module):
    """–ú–æ–¥—É–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–æ–º —á–∞—Ç–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
    strings = {
        "name": "Mailing Chats",
        "chat_added": "‚úÖ –ß–∞—Ç {} ({}) –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ —Ä–∞—Å—Å—ã–ª–∫–∏",
        "chat_removed": "‚ùå –ß–∞—Ç {} ({}) —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏",
        "no_chats": "üìã –°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –ø—É—Å—Ç",
        "chats_list": "üìù –¢–µ–∫—É—â–∏–µ —á–∞—Ç—ã –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:\n{}",
        "chat_already_exists": "‚ö†Ô∏è –ß–∞—Ç {} ({}) —É–∂–µ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ —Ä–∞—Å—Å—ã–ª–∫–∏",
        "chat_not_found": "‚ùå –ß–∞—Ç {} ({}) –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ —Ä–∞—Å—Å—ã–ª–∫–∏",
        "delay_updated": "‚öôÔ∏è –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–æ–æ–±—â–µ–Ω–∏–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ {} —Å–µ–∫—É–Ω–¥"
    }

    def __init__(self):
        self.config = loader.ModuleConfig(
            loader.ConfigValue(
                "mailing_chats",
                [],
                doc=lambda: "–°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏",
                validator=loader.validators.Series(loader.validators.Integer())
            ),
            loader.ConfigValue(
                "delay_between_sends",
                2,
                doc=lambda: "–ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–µ–∫—É–Ω–¥–∞—Ö"
            )
        )

    async def get_chat_name(self, message):
        """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞ –∏–ª–∏ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            chat = await message.get_chat()
            if hasattr(chat, 'title'):
                return chat.title
            elif hasattr(chat, 'first_name'):
                return f"{chat.first_name} {chat.last_name or ''}".strip()
            else:
                return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —á–∞—Ç"
        except Exception:
            return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —á–∞—Ç"

    @loader.command()
    async def addchatr(self, message):
        """–î–æ–±–∞–≤–∏—Ç—å —á–∞—Ç –≤ —Å–ø–∏—Å–æ–∫ —Ä–∞—Å—Å—ã–ª–∫–∏"""
        chat_id = utils.get_chat_id(message)
        chat_name = await self.get_chat_name(message)
        
        if chat_id in self.config['mailing_chats']:
            status_message = await message.edit(self.strings["chat_already_exists"].format(chat_id, chat_name))
            await asyncio.sleep(3)
            await status_message.delete()
            return

        chats_list = list(self.config['mailing_chats'])
        chats_list.append(chat_id)
        self.config['mailing_chats'] = chats_list

        status_message = await message.edit(self.strings["chat_added"].format(chat_id, chat_name))
        await asyncio.sleep(3)
        await status_message.delete()

    @loader.command()
    async def delchatr(self, message):
        """–£–¥–∞–ª–∏—Ç—å —á–∞—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏"""
        chat_id = utils.get_chat_id(message)
        chat_name = await self.get_chat_name(message)
        
        if chat_id not in self.config['mailing_chats']:
            status_message = await message.edit(self.strings["chat_not_found"].format(chat_id, chat_name))
            await asyncio.sleep(3)
            await status_message.delete()
            return

        chats_list = list(self.config['mailing_chats'])
        chats_list.remove(chat_id)
        self.config['mailing_chats'] = chats_list

        status_message = await message.edit(self.strings["chat_removed"].format(chat_id, chat_name))
        await asyncio.sleep(3)
        await status_message.delete()

    @loader.command()
    async def setdelay(self, message):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–æ–æ–±—â–µ–Ω–∏–π (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)"""
        args = utils.get_args_raw(message)
        try:
            delay = float(args)
            if delay < 0:
                raise ValueError
            self.config['delay_between_sends'] = delay
            status_message = await message.edit(self.strings["delay_updated"].format(delay))
            await asyncio.sleep(3)
            await status_message.delete()
        except (ValueError, TypeError):
            status_message = await message.edit("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ")
            await asyncio.sleep(3)
            await status_message.delete()

    @loader.command()
    async def listchatr(self, message):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
        chats = self.config['mailing_chats']
        
        if not chats:
            status_message = await message.edit(self.strings["no_chats"])
            await asyncio.sleep(3)
            await status_message.delete()
            return

        chat_names = []
        for chat_id in chats:
            try:
                chat = await message.client.get_entity(chat_id)
                if hasattr(chat, 'title'):
                    chat_names.append(f"{chat_id}: {chat.title}")
                elif hasattr(chat, 'first_name'):
                    name = f"{chat.first_name} {chat.last_name or ''}".strip()
                    chat_names.append(f"{chat_id}: {name}")
                else:
                    chat_names.append(str(chat_id))
            except Exception:
                chat_names.append(str(chat_id))

        chat_list = "\n".join(chat_names)
        status_message = await message.edit(self.strings["chats_list"].format(chat_list))
        await asyncio.sleep(10)
        await status_message.delete()

    @loader.command()
    async def mailall(self, message):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–æ –≤—Å–µ —á–∞—Ç—ã –∏–∑ —Å–ø–∏—Å–∫–∞"""
        text = utils.get_args_raw(message)
        if not text:
            status_message = await message.edit("‚ùå –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏")
            await asyncio.sleep(3)
            await status_message.delete()
            return

        chats = self.config['mailing_chats']
        if not chats:
            status_message = await message.edit(self.strings["no_chats"])
            await asyncio.sleep(3)
            await status_message.delete()
            return

        success_count = 0
        for chat in chats:
            try:
                await message.client.send_message(chat, text)
                success_count += 1
                if success_count < len(chats):
                    await asyncio.sleep(self.config['delay_between_sends'])
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ —á–∞—Ç {chat}: {e}")

        status_message = await message.edit(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ {success_count} —á–∞—Ç–æ–≤")
        await asyncio.sleep(3)
        await status_message.delete()
